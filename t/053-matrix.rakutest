#!/usr/bin/env perl6

use Test;
use lib 'lib';
use Math::Libgsl::Matrix;
use Math::Libgsl::Vector;
use Math::Libgsl::Constants;

subtest {
  my Math::Libgsl::Matrix $m1 .= new(:size1(3), :size2(3));
  isa-ok $m1, Math::Libgsl::Matrix, 'new using pairs';
  ok $m1.matrix.size1 == 3 && $m1.matrix.size2 == 3, 'attributes ok';
  my Math::Libgsl::Matrix $m2 .= new(3, 3);
  isa-ok $m2, Math::Libgsl::Matrix, 'new using values';
}, 'matrix allocation';

subtest {
  my Math::Libgsl::Matrix $m1 .= new(:size1(3), :size2(3));
  ok $m1.get(0, 0) == 0, 'get element';
  dies-ok { $m1.get(3, 3) }, 'get element (4,4) of a (3,3) matrix dies';
  ok $m1[0;0] == 0, 'get element using postcircumfix';
  dies-ok { $m1[3;3] }, 'get element (4,4) using postcircumfix of a (3,3) matrix dies';
  lives-ok { $m1.set(0, 0, 10) }, 'element set lives';
  ok $m1.get(0, 0) == 10e0, 'element set';
  dies-ok { $m1.set(3, 3, 10) }, 'set element (4,4) of a (3,3) matrix dies';
  lives-ok { $m1[0;1] = 12 }, 'set element using postcircumfix lives';
  ok $m1.get(0,1) == 12e0, 'element set using postcircumfix lives';
  dies-ok { $m1[3;3] = 12e0 }, 'set element (4,4) using postcircumfix of a (3,3) matrix dies';
  lives-ok { $m1.setall(1) }, 'set all elements';
  is-deeply ($m1.get-row($_) for ^3).flat, (1e0 xx 9), 'all elements set';
  lives-ok { $m1.zero }, 'set all elements to zero';
  is-deeply ($m1.get-row($_) for ^3).flat, (0e0 xx 9), 'all elements zeroed';
  lives-ok { $m1.identity }, 'identity ok';
  is-deeply ($m1.get-row($_) for ^3).flat, (1e0, 0e0, 0e0, 0e0, 1e0, 0e0, 0e0, 0e0, 1e0), 'identity matrix';
}, 'matrix set & get';

subtest {
  my Math::Libgsl::Matrix $m1 .= new(:size1(3), :size2(3));
  $m1.setall(1);
  my $filename = 't/matrix.dat';
  LEAVE { with $filename.IO { .unlink if .e } }
  lives-ok { $m1.write($filename) }, 'can write a matrix to file';
  lives-ok { $m1.read($filename) }, 'can read a matrix from file';
  lives-ok { $m1.printf($filename, "%3.1lf") }, 'can print a matrix to file';
  is-deeply $filename.IO.lines, '1.0' xx 9, 'matrix file ok';
}, 'matrix IO';

subtest {
  my Math::Libgsl::Matrix $m1 .= new(:size1(3), :size2(4));
  $m1.setall(1);
  my Math::Libgsl::Matrix $mv1;
  $mv1 = $m1.submatrix(1, 1, 2, 2);
  $mv1.setall(12);
  is-deeply ($m1.get-row($_) for ^3).flat, (1e0, 1e0, 1e0, 1e0, (1e0, 12e0, 12e0, 1e0) xx 2).flat, 'modify matrix using submatrix';
  dies-ok  { $m1.submatrix(3, 2, 1, 1) }, 'submatrix 4x4 of a 3x4 matrix dies';
  dies-ok  { $m1.submatrix(2, 4, 1, 1) }, 'submatrix 3x5 of a 3x4 matrix dies';
  dies-ok  { $m1.submatrix(2, 3, 2, 1) }, 'submatrix 4x4 of a 3x4 matrix dies';
  my @a[2;3] = (1, 2, 3), (4, 5, 6);
  $mv1 = mat-view-array(@a);
  is-deeply ($mv1.get-row($_) for ^2).flat, (1e0..6e0).flat, 'matrix view ok';
  my @b = 1..6;
  dies-ok { mat-view-array(@b) }, "can't create a view on a regular array";
  $mv1 = mat-view-array-tda(@a, 4);
  is-deeply ($mv1.get-row($_) for ^2).flat, (1e0, 2e0, 3e0, 5e0, 6e0, 0e0).flat, 'matrix view with tda ok';
  dies-ok { mat-view-array-tda(@b, 2) }, "can't create a view with tda on a regular array";
  dies-ok { mat-view-array-tda(@a, 2) }, "can't create a view with tda if tda<n2";
  my Math::Libgsl::Vector $v1 .= new(:size(9));
  $v1.set($_, $_.Num) for ^9;
  $mv1 = mat-view-vector($v1, 3, 3);
  is-deeply ($mv1.get-row($_) for ^3).flat, (0e0..8e0).flat, 'matrix view of a vector ok';
  $mv1 = mat-view-vector-tda($v1, 2, 2, 3);
  is-deeply ($mv1.get-row($_) for ^2).flat, (0e0, 1e0, 3e0, 4e0), 'matrix view with tda from a vector ok';
  dies-ok { mat-view-vector-tda($v1, 3, 4, 3) }, "can create a matrix view with tda if tda<n2";
  $m1.set(0, $_, $_) for ^4;
  $m1.set(1, 0, 1);
  $m1.set(2, 0, 2);
  my Math::Libgsl::Vector $v2;
  $v2 = $m1.row-view(0);
  is-deeply $v2[^4], (^4)».Num.flat, 'row view ok';
  $v2 = $m1.col-view(0);
  is-deeply $v2[^3], (^3)».Num.flat, 'col view ok';
  $v2 = $m1.subrow-view(0, 1, 2);
  is-deeply $v2[^2], (1e0, 2e0), 'subrow view ok';
  $v2 = $m1.subcol-view(0, 1, 2);
  is-deeply $v2[^2], (1e0, 2e0), 'subcol view ok';
  $m1.set(0, 0, 1);
  $v2 = $m1.diagonal-view();
  is-deeply $v2[^3], (1e0, 12e0, 12e0), 'diagonal view ok';
  $v2 = $m1.subdiagonal-view(1);
  is-deeply $v2[^2], (1e0, 12e0), 'subdiagonal view ok';
  dies-ok { $m1.subdiagonal-view(6) }, "can't create a subdiagonal view with k>min(size1,size2)";
  $v2 = $m1.superdiagonal-view(1);
  is-deeply $v2[^2], (1e0, 12e0), 'superdiagonal view ok';
}, 'views';

subtest {
  my Math::Libgsl::Matrix $m1 .= new(:size1(3), :size2(3));
  $m1.setall(1);
  my Math::Libgsl::Matrix $m2 .= new(:size1(3), :size2(3));
  lives-ok { $m2.copy($m1) }, 'can copy a matrix';
  is-deeply ($m2.get-row($_) for ^3).flat, (1e0 xx 9), 'matrix copy ok';
  $m1.setall(2);
  lives-ok { $m2.swap($m1) }, 'can swap two matrices';
  is-deeply ($m2.get-row($_) for ^3).flat, (2e0 xx 9), 'matrix swap ok';
}, 'copy & swap';

subtest {
  my Math::Libgsl::Matrix $m1 .= new(:size1(3), :size2(4));
  my Math::Libgsl::Vector $v1 .= new(:size(4));
  $v1.set($_, $_.Num) for ^4;
  lives-ok { $m1.set-row(0, $v1) }, 'can set a row from a vector';
  is-deeply $m1.get-row(0), (^4)».Num.flat.Array, 'set row ok';
  my @row = ^4;
  lives-ok { $m1.set-row(0, @row) }, 'can set a row from an array';
  is-deeply $m1.get-row(0), (^4)».Num.flat.Array, 'set row ok';
  my Math::Libgsl::Vector $v2 .= new(:size(3));
  $v2.set($_, $_.Num) for ^3;
  lives-ok { $m1.set-col(0, $v2) }, 'can set a row from a vector';
  is-deeply $m1.get-col(0), (^3)».Num.flat.Array, 'set col ok';
  my @col = ^3;
  lives-ok { $m1.set-col(0, @col) }, 'can set a col from an array';
  is-deeply $m1.get-col(0), (^3)».Num.flat.Array, 'set col ok';
}, 'get & set rows & columns';

subtest {
  my Math::Libgsl::Matrix $m1 .= new(:size1(3), :size2(4));
  $m1.set-row(0, ^4);
  $m1.set-row(1, 4..7);
  lives-ok { $m1.swap-rows(0, 1) }, 'can swap rows';
  is-deeply $m1.get-row(1), (^4)».Num.flat.Array, 'swap rows ok';
  lives-ok { $m1.swap-cols(0, 1) }, 'can swap cols';
  is-deeply $m1.get-col(0), [5e0, 1e0, 0e0], 'swap cols ok';
  dies-ok { $m1.swap-rowcol(0, 1) }, "can't swap row & col when not square";
  my Math::Libgsl::Matrix $m2 .= new(:size1(3), :size2(3));
  $m2.set-row(0, ^3);
  $m2.set-row(1, 3..5);
  $m2.set-row(2, 6..8);
  lives-ok { $m2.swap-rowcol(0, 0) }, 'can swap row & col';
  is-deeply $m2.get-row(0), [0e0, 3e0, 6e0], 'swap row & col ok';
  my Math::Libgsl::Matrix $m3 .= new(:size1(4), :size2(3));
  lives-ok { $m3.copy-transpose($m1) }, 'can copy and transpose';
  is-deeply ($m3.get-row($_) for ^4).flat, (5e0, 1e0, 0e0, 4e0, 0e0, 0e0, 6e0, 2e0, 0e0, 7e0, 3e0, 0e0), 'copy and transpose ok';
  lives-ok { $m2.transpose() }, 'can transpose';
  is-deeply ($m2.get-row($_) for ^3).flat, (0e0, 1e0, 2e0, 3e0, 4e0, 7e0, 6e0, 5e0, 8e0), 'transpose ok';
}, 'exchange rows & columns';

subtest {
  my Math::Libgsl::Matrix $m1 .= new(:size1(3), :size2(3));
  my Math::Libgsl::Matrix $m2 .= new(:size1(3), :size2(3));
  $m1.set-row($_, ^3) for ^3;
  $m2.set-row($_, ^3) for ^3;
  $m1.add($m2);
  is-deeply ($m1.get-row($_) for ^3).flat, ((0e0, 2e0, 4e0) xx 3).flat, 'can add';
  $m1.sub($m2);
  is-deeply ($m1.get-row($_) for ^3).flat, ((0e0, 1e0, 2e0) xx 3).flat, 'can sub';
  $m1.mul($m2);
  is-deeply ($m1.get-row($_) for ^3).flat, ((0e0, 1e0, 4e0) xx 3).flat, 'can mul';
  $m1.set($_, 0, 1) for ^3;
  $m2.set($_, 0, 1) for ^3;
  $m1.div($m2);
  is-deeply ($m1.get-row($_) for ^3).flat, ((1e0, 1e0, 2e0) xx 3).flat, 'can div';
  $m1.scale(2);
  is-deeply ($m1.get-row($_) for ^3).flat, ((2e0, 2e0, 4e0) xx 3).flat, 'can scale';
  $m1.add-constant(1);
  is-deeply ($m1.get-row($_) for ^3).flat, ((3e0, 3e0, 5e0) xx 3).flat, 'can add a constant';
}, 'matrix operations';

subtest {
  my Math::Libgsl::Matrix $m1 .= new(:size1(3), :size2(3));
  $m1.set-row(0, ^3);
  $m1.set-row(1, 3..5);
  $m1.set-row(2, 6..8);
  ok $m1.max == 8e0, 'max element';
  ok $m1.min == 0e0, 'min element';
  is-deeply $m1.minmax, (0e0, 8e0), 'min & max elements';
  is-deeply $m1.max-index, (2, 2), 'index of max element';
  is-deeply $m1.min-index, (0, 0), 'index of min element';
  is-deeply $m1.minmax-index, (0, 0, 2, 2), 'index of min & max elements';
}, 'matrix min & max';

subtest {
  my Math::Libgsl::Matrix $m1 .= new(:size1(3), :size2(3));
  ok $m1.is-null, 'all elements are 0';
  $m1.setall(2e0);
  ok $m1.is-pos, 'all elements are >0';
  $m1.set(0, 0, 0e0);
  nok $m1.is-pos, 'fails if not all elements are >0';
  $m1.setall(-2e0);
  ok $m1.is-neg, 'all elements are <0';
  my Math::Libgsl::Matrix $m2 .= new(:size1(3), :size2(3));
  $m2.setall(-2e0);
  ok $m1.is-equal($m2), 'two matrices are equal';
}, 'matrix properties';

done-testing;
